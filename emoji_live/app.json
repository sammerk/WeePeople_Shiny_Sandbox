[{"name":"app.R","content":"library(shiny)\nlibrary(ggdist) \nlibrary(tibble)\nlibrary(ggplot2)\n\n\n\n\n# Define the UI\nui <- fluidPage(\n    titlePanel(\"Interactive Dot Plot\"),\n    plotOutput(\"plot\", click = \"plot_click\"),\n    verbatimTextOutput(\"click_info\") # Optional: To show click info\n)\n\n# Define the Server\nserver <- function(input, output, session) {\n    \n    # Reactive data storage for points\n    points <- reactiveVal(\n        tibble(x = factor(character(0), levels = c(\"men\", \"women\")),\n                   y = numeric(0)))\n    \n    # Render the ggplot\n    output$plot <- renderPlot({\n        ggplot(points(), aes(x = x, y = y)) + \n            geom_dots(aes(shape = x), \n                      dotsize = .35,\n                      overflow = \"compress\",\n                      stackratio = 1.5,\n                      binwidth = 1,\n                      fill = NA) + \n            scale_shape_manual(values = c(\"women\" = \"ðŸ‘§\", \"men\" = \"ðŸ‘¦\")) +\n            scale_x_discrete(limits = c(\"men\", \"women\")) +\n            scale_y_continuous(limits = c(0, 10), breaks = 1:10) +\n            theme_minimal() +\n            theme(panel.grid.minor = element_blank())\n    })\n    \n    # Handle plot clicks\n    observeEvent(input$plot_click, {\n        click <- input$plot_click\n        x_pos <- ifelse(click$x < 1.5, \"men\", \"women\") # Dichotomous x-axis\n        icon <- factor(\n            ifelse(click$x < 1.5, \n                   sample(LETTERS, 1), \n                   sample(letters, 1)),\n            levels = c(letters, LETTERS)) # Icon based on x-axis\n        y_pos <- round(click$y)\n        \n        # Add the new point to the reactive data\n        new_point <- \n            data.frame(x = x_pos, y = y_pos, icon = icon)\n        points(rbind(points(), new_point))\n    })\n    \n    # Optional: Display click information\n    output$click_info <- renderPrint({\n        head(points())\n    })\n}\n\n# Run the app\nshinyApp(ui, server)\n","type":"text"}]
